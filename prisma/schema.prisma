// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  posts    Post[]
  comments Comment[]
  subscriptions Subscription[]
  payments Payment[]
  downloads Download[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  excerpt     String?
  featuredImage String?
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  views       Int      @default(0)
  likes       Int      @default(0)
  category    String
  tags        String[]
  seoTitle    String?
  seoDescription String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  authorId String
  author   User     @relation(fields: [authorId], references: [id])
  comments Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id])
  postId   String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Subscription {
  id        String   @id @default(cuid())
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String?
  user   User?  @relation(fields: [userId], references: [id])
}

model Payment {
  id              String      @id @default(cuid())
  amount          Float
  currency        String      @default("USD")
  status          PaymentStatus @default(PENDING)
  stripePaymentId String?
  description     String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String   @db.Text
  category  String
  order     Int      @default(0)
  published Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Download {
  id          String   @id @default(cuid())
  guideId     String
  userId      String?
  type        String   @default("free")
  downloadedAt DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id])
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
